#ifndef JOINTABSTRACTIONSET_H
#define JOINTABSTRACTIONSET_H

#include "AbstractionSet.h"

class JointAbstractionSet
{
    const AbstractionSet* baseAS;
    Prob* weights; 

public:
    JointAbstractionSet(const AbstractionSet* as, const VarSet& evidence)
        : baseAS(as)
    {
        weights = new Prob[as->getNumAbstractions()];

        // Compute new weights
        Prob totalProb = 0.0;
        for (int a = 0; a < baseAS->getNumAbstractions(); a++) {
            weights[a] = as->getWeight(a) * as->getProb(evidence, a);
            totalProb += weights[a];
        }

        // Normalize
        for (int a = 0; a < baseAS->getNumAbstractions(); a++) {
            weights[a] /= totalProb;
        }
    }

    double getProb(const VarSet& x)
    {
        // Add in probability of x being generated by each component,
        // scaled by that component's weight in the joint distribution.
        Prob p = 0.0;
        for (int a = 0; a < baseAS->getNumAbstractions(); a++) {
            p += baseAS->getProb(x, a) * weights[a];
        }

        return p;
    }
};

#endif // ndef JOINTABSTRACTIONSET_H
